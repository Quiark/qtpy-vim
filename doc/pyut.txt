*pytest.txt*  Plugin for running python unit tests in vim

Simple approach to visual selection of Python blocks.
==============================================================================
CONTENTS                                                      *Pytest-contents*

    1. Intro .......................... |PyutIntro|
    2. Usage .......................... |PyutUsage|
    3. Configuration .................. |PyutConfig|
    4. Shell Support .................. |ShellSupport|
    5. License ........................ |PyutLicense|
    6. Bugs ........................... |PyutBugs|
    7. Credits ........................ |PyutCredits|

==============================================================================
1. Intro                                                          *PyutIntro*

A simple way of running single or multiple python unit tests from within VIM
based on the cursor location.

Useful for receiving immediate feedback as you write tests, despite what test
runner or framework your project uses to run its tests.

==============================================================================
2. Usage                                                          *PyutUsage*

For running tests the plugin provides 3 arguments with an optional one. 
These arguments are::

    class
    method
    file


As you may expect, those will focus on the tests for the current class, method,
or the whole file.

If you are in a class and want to run all the tests for that class, you would
call this plugin like::

    :Pyut class

Whenever a command is triggered a small message displays informing you that
the plugin is running a certain action. In the above call, you would see 
something like this::

    Running tests for class TestMyClass

If you would like to see the complete pyut output you can add an optional `verbose`
flag to any of the commands for Pyut. For the previous command, it would
look like::

    :Pyut class verbose

This would open a split scratch buffer that you can fully interact with. You
can close this buffer with ':wq' or you can hit 'q' at any moment in that buffer
to close it.

When tests are successful a green bar appears. If you have any number of fails
you get a red bar with a line-by-line list of line numbers and errors.

I recommend mapping keys to Pyut commands for easy running. To do so, insert
commands like this into your .vimrc::

    " Pyut
    au FileType python nnoremap <F8> :Pyut method verbose<CR>
    au FileType python nnoremap <F9> :Pyut session<CR>

    au FileType python nnoremap <silent><Leader>c <Esc>:Pyut class verbose<CR>

The 'au FileType python' ensures these 


==============================================================================
3. Configuration                                                *PyutConfig*
-------------
Pyut is configured to work with nosetests by default, however, using pyut with 
other unit tests runners is simple. Just set the necessary variables in your
vimrc. 

For example, insert these lines into your .vimrc to use Pyut with Py.Test::

    " for use with Py.Test
    let g:pyut_shell_command = "py.test --tb=short" "py.tests
    let g:pyut_class_delimiter = "::"
    let g:pyut_method_delimiter = "::"

The delimiter variables are used with constructing the test path to pass into
the test runner. Such as "py.test /testfolder/testfile.py::TestClass::TestMethod"
for the example above where the first '::' is the class_delimiter and the second
is the method_delimiter

==============================================================================
4. Shell Support                                                *ShellSupport*

This plugin provides a way to have a better shell experience when running
`verbose` or `pdb` flags by using the `Conque.vim` plugin. If you have this
most excellent piece of Vim plugin (see: http://www.vim.org/scripts/script.php?script_id=2771)
then `pytest.vim` will use that instead of Vim's own dumb shell environment.

==============================================================================
5. License                                                     *PyutLicense*

MIT
Copyright (c) 2011 Alex Meade <hatboy112 [at] yahoo [dot] com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

==============================================================================
6. Bugs                                                            *PyutBugs*

If you find a bug please post it on the issue tracker:
https://github.com/ameade/pyut-vim/issues

==============================================================================
7. Credits                                                      *PyutCredits*

Thanks to Alfredo Deza for writing Pytest.vim, an easy to use VIM plugin for
running py.test unit tests as conveniently as possible.

The core functionality of this plugin was brought over from pytest.vim
Copyright (c) 2011 Alfredo Deza <alfredodeza [at] gmail [dot] com>

==============================================================================
